#BlueJ class context
comment0.params=
comment0.target=void\ init()
comment0.text=\r\n\ This\ method\ is\ called\ exactly\ once\ when\ your\ program\ is\ first\ started.\r\n\ You'll\ eventually\ use\ it\ to\ allow\ the\ user\ to\ set\ the\ game\ difficulty.\r\n
comment1.params=
comment1.target=boolean\ isInside()
comment1.text=\r\n\ @return\ true\ if\ the\ little\ box\ is\ currently\ entirely\ within\ the\ big\ box\r\n\ and\ false\ otherwise\r\n
comment10.params=
comment10.target=void\ run()
comment10.text=\r\n\ this\ method\ contains\ the\ main\ run\ loop\ for\ the\ game\r\n\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ This\ method\ creates\ a\ window\ frame\ and\ displays\ the\ BoxCatcher\r\n\ game\ inside\ of\ it.\ \ \r\n
comment12.params=e
comment12.target=void\ windowClosing(java.awt.event.WindowEvent)
comment2.params=
comment2.target=boolean\ isOverlapping()
comment2.text=\r\n\ @return\ true\ if\ the\ little\ box\ is\ overlapping\ with\ the\ big\ box\ and\ false\r\n\ otherwise\r\n
comment3.params=canvas
comment3.target=void\ paint(java.awt.Graphics)
comment3.text=\r\n\ When\ called,\ this\ method\ will\ draw\ the\ big\ and\ little\ boxes\ at\ their\r\n\ current\ positions\ based\ on\ the\ class\ variables\ above.\ \ The\ color\ of\ the\r\n\ boxes\ vary\ depending\ upon\ whether\ their\ relative\ positions\:\r\n\ \ \ \r\n\ \ \ small\ box\ is\ fully\ -\ the\ big\ box\ is\ white\ with\ a\ black\r\n\ \ \ inside\ the\ big\ box\ \ \ border.\ \ The\ small\ box\ is\ green.\r\n\r\n\ \ \ small\ box\ overlaps\ -\ the\ big\ box\ is\ gray\ with\ a\ black\r\n\ \ \ the\ big\ box\ \ \ \ \ \ \ \ \ \ border.\ \ The\ small\ box\ is\ yellow.\r\n\r\n\ \ \ otherwise\ \ \ \ \ \ \ \ \ \ -\ the\ big\ box\ is\ black\ and\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ small\ box\ is\ red\r\n\r\n\ \ This\ method\ also\ updates\ and\ displays\ the\ user's\ score\ and\ the\ number\ of\r\n\ \ elapsed\ seconds\ since\ the\ program\ started.\ \ The\ user\ gets\ +1\ to\ score\r\n\ \ each\ time\ the\ small\ box\ is\ moved\ inside\ the\ big\ box.\r\n\ \ \r\n
comment4.params=
comment4.target=void\ moveTheBox()
comment4.text=\r\n\ This\ method\ repeatedly\ changes\ the\ x,y\ position\ of\ the\ box\ using\ its\r\n\ trajectory\ as\ specified\ by\ bigBoxDeltaX\ and\ bigBoxDeltaY.\ \ If\ the\ big\ box\r\n\ would\ hit\ a\ wall\ it\ "bounces"\ by\ multiplying\ one\ or\ both\ of\ its\r\n\ trajectory\ values\ by\ -1.\ \ Each\ time\ box\ is\ moved,\ the\ repaint\ method\r\n\ is\ called\ to\ update\ its\ position\ and\ then\ the\ pause()\ method\ is\ called\r\n\ so\ the\ user\ has\ time\ to\ react.\r\n\r\n\ This\ method\ returns\ when\ the\ user\ catches\ the\ box\ (i.e.,\ the\ user's\r\n\ score\ changes).\r\n
comment5.params=initCanvas
comment5.target=BoxCatcher(java.awt.Canvas)
comment5.text=\r\n\ Whenever\ an\ instance\ of\ BoxCatcher\ is\ created,\ it\ registers\r\n\ itself\ to\ be\ notified\ whenever\ the\ mouse\ cursor\ moves\ and\ also\r\n\ saves\ the\ canvas\ in\ an\ instance\ variable\r\n
comment6.params=event
comment6.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment6.text=\r\n\ this\ method\ gets\ called\ whenever\ the\ user\ moves\ the\ mouse\r\n
comment7.params=event
comment7.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment7.text=\r\n\ this\ method\ is\ called\ whenever\ the\ user\ drags\ the\ mouse\ cursor.\r\n\ This\ event\ is\ currently\ ignored\r\n
comment8.params=
comment8.target=void\ pause()
comment8.text=\r\n\ this\ method\ causes\ the\ computer\ to\ wait\ a\ split\ second\ before\r\n\ continuing.\ \ The\ more\ you\ play,\ the\ faster\ it\ goes\!\r\n
comment9.params=
comment9.target=void\ repaint()
comment9.text=\r\n\ this\ method\ manages\ the\ creation\ and\ display\ of\ the\ next\ frame\ in\ the\r\n\ game\ animation\r\n
numComments=13
